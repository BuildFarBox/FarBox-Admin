// Generated by CoffeeScript 1.6.2
(function() {
  var EditorModel, Post, controls_width, data_host, sync_gateway,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    _this = this;

  data_host = '/admin/code/data';

  sync_gateway = '/service/gateway/sync';

  controls_width = 235;

  Post = function(raw_post, editor) {
    var _this = this;

    this.path = raw_post.path;
    this.title = raw_post.path.split('/').slice(1).join('/');
    this.content = raw_post['content'] || '';
    this.edit = function() {
      var current_post_dom, indent_with_tab, index, mode, _ref, _ref1;

      if (editor.current_post()) {
        editor.current_post()['content'] = editor.get_content();
        editor._sync(editor.get_path(), editor.get_content());
      }
      $('#editor CodeMirror').remove();
      indent_with_tab = false;
      if (raw_post.ext === 'jade') {
        if (!_this.content) {
          indent_with_tab = true;
        } else if (_this.content.match(/(^|\n)\t/)) {
          indent_with_tab = true;
        }
        mode = {
          name: "jade",
          alignCDATA: true
        };
      } else if (raw_post.ext === 'html') {
        mode = {
          name: "jinja2",
          htmlMode: true
        };
      } else if ((_ref = raw_post.ext) === 'js' || _ref === 'json') {
        mode = 'javascript';
      } else if (raw_post.ext === 'less') {
        mode = "text/x-less";
      } else if ((_ref1 = raw_post.ext) === 'sass' || _ref1 === 'scss') {
        mode = "text/x-scss";
      } else if (raw_post.ext === 'css') {
        mode = 'text/css';
      } else if (raw_post.ext === 'coffee') {
        mode = 'text/x-coffeescript';
      }
      _this.code_editor = CodeMirror(document.getElementById("editor"), {
        value: _this.content,
        lineNumbers: true,
        matchBrackets: true,
        mode: mode,
        theme: 'solarized',
        indentWithTabs: indent_with_tab
      });
      _this.code_editor.focus();
      _this.doc = _this.code_editor.getDoc();
      _this.doc.on('change', function(the_doc, change_obj) {
        return editor.sync();
      });
      $('#posts li a.current').removeClass('current');
      index = $.inArray(_this, editor.posts());
      current_post_dom = $($('#posts li a')[index]);
      current_post_dom.addClass('current');
      return editor.current_post(_this);
    };
    this.remove = function() {
      var current;

      $.post(sync_gateway, {
        'path': _this.path,
        'is_deleted': true
      });
      editor.posts.remove(_this);
      if (editor.posts().length) {
        if (_this.path === editor.get_path()) {
          current = editor.posts()[0];
          return current.edit();
        }
      } else {
        return editor.create_post();
      }
    };
    return this;
  };

  EditorModel = function() {
    var controls, self,
      _this = this;

    self = this;
    controls = $('#controls');
    this.posts = ko.observableArray([]);
    this.current_post = ko.observable({});
    this.current_title = ko.observable('');
    this.need_sync = ko.observable(false);
    this.sync_per_seconds = 20;
    this.show_tip_info = ko.observable(false);
    this.tip_info = ko.observable('Save');
    this.wait_to_sync_precess = ko.observable(0);
    this.load_posts = function() {
      return $.getJSON(data_host, {}, function(posts) {
        var post, _i, _len;

        for (_i = 0, _len = posts.length; _i < _len; _i++) {
          post = posts[_i];
          _this.posts.push(new Post(post, self));
        }
        if (_this.posts().length) {
          return _this.posts()[0].edit();
        } else {
          return _this.create_post();
        }
      });
    };
    this.create_post = function() {
      var ext, ext_parts, new_post, path, paths;

      paths = $.map(_this.posts(), function(post) {
        return post.path;
      });
      path = window.prompt("Path:", "");
      if (__indexOf.call(paths, path) >= 0) {
        Essage.show({
          message: 'this path already exists',
          status: 'error'
        });
        return false;
      } else {
        ext_parts = path.split('.');
        ext = ext_parts[ext_parts.length - 1];
        if (ext !== 'scss' && ext !== 'sass' && ext !== 'css' && ext !== 'less' && ext !== 'jade' && ext !== 'html' && ext !== 'json' && ext !== 'coffee') {
          Essage.show({
            message: 'this file type is not allowed',
            status: 'error'
          });
          return false;
        }
        path = path.replace(/^\//g, '', path);
        new_post = new Post({
          path: 'template/' + path,
          ext: ext
        }, self);
        _this.posts.unshift(new_post);
        return new_post.edit();
      }
    };
    this.get_content = function() {
      var code_editor_doc;

      code_editor_doc = _this.current_post().doc;
      if (code_editor_doc) {
        return code_editor_doc.getValue();
      } else {
        return '';
      }
    };
    this.get_path = function() {
      return _this.current_post().path;
    };
    this.sync = function() {
      var diff_seconds;

      if (!_this.keep_sync_binded) {
        _this.keep_sync_binded = true;
        setInterval(_this.keep_sync, 1000);
        _this.last_sync_at = new Date();
        _this.need_sync(true);
      }
      if (!_this.need_sync()) {
        _this.last_sync_at = new Date();
      }
      _this.need_sync(true);
      _this.show_tip_info(true);
      diff_seconds = _this.sync_per_seconds - (new Date() - _this.last_sync_at) / 1000;
      _this.wait_to_sync_precess(100 * (1 - diff_seconds / _this.sync_per_seconds) + '%');
      if (diff_seconds > 0) {
        return false;
      } else {
        return _this._sync();
      }
    };
    this.keep_sync = function() {
      if (!_this.need_sync()) {
        return false;
      } else {
        return _this.sync();
      }
    };
    this._sync = function(path, content) {
      var data;

      if (typeof path !== 'string') {
        path = '';
      }
      if (typeof content !== 'string') {
        content = '';
      }
      if (!_this.need_sync()) {
        return false;
      } else {
        _this.last_sync_at = new Date();
        _this.need_sync(false);
      }
      _this.tip_info('Saving...');
      path = path || _this.get_path();
      content = content || _this.get_content();
      data = {
        path: path,
        raw_content: content
      };
      return $.post(sync_gateway, data, function() {
        _this.tip_info('Save');
        if (!_this.need_sync()) {
          return _this.show_tip_info(false);
        }
      });
    };
    return this;
  };

  this.run_editor = function() {
    var editor_model;

    editor_model = new EditorModel();
    _this.editor = editor_model;
    return $(document).ready(function() {
      var _this = this;

      ko.applyBindings(editor_model);
      editor_model.load_posts();
      return window.onbeforeunload = function() {
        if (editor_model.need_sync()) {
          return 'Contents not saved yet, Please wait for a moment!';
        }
        return null;
      };
    });
  };

}).call(this);

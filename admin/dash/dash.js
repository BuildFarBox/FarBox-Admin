// Generated by CoffeeScript 1.6.2
(function() {
  var DashBoard, ImageUploader, TemplateChooser, admin_data_gateway, auto_iframe, clone_template_gateway, content_gateway, exports, main_menus, right_size_for_templates;

  exports = this;

  this.lang_keys = {
    'zh_cn': {
      'Setup': '设置',
      'Statistics': '统计',
      'Templates': '网站模板',
      'Default Template': '默认模板',
      'Help': '帮助',
      'Domain': '域名',
      'Visit Site': '访问网站',
      'Logout': '登出',
      'Save Configs': '保存设置',
      'Configs are saved!': '设置已经保存了!',
      'Current Status...': '当前状态...',
      'Use This One': '使用这个模板',
      'Current Template of this Site': '当前正在使用的模板',
      'Image Uploading, Wait...': '图片上传中, 请稍等...',
      'Image Uploaded, Done!': '图片已上传成功!'
    },
    'zh_tw': {
      'Setup': '設置',
      'Statistics': '統計',
      'Templates': '網站模板',
      'Default Template': '默認模板',
      'Help': '幫助',
      'Domain': '域名',
      'Visit Site': '訪問網站',
      'Logout': '登出',
      'Save Configs': '保存設置',
      'Configs are saved!': '設置已經保存了!',
      'Current Status...': '當前狀態...',
      'Use This One': '使用這個模板',
      'Current Template of this Site': '當前正在使用的模板',
      'Image Uploading, Wait...': '圖片上傳中，請稍等...',
      'Image Uploaded, Done!': '圖片已上傳成功!'
    }
  };

  this.lang = navigator.language.toLowerCase().replace('-', '_');

  this.get_text = function(key, keys) {
    var texts;

    if ((typeof lang_keys !== "undefined" && lang_keys !== null) && !keys) {
      keys = lang_keys;
    }
    texts = keys[lang];
    if (texts) {
      return texts[key + '_' + lang] || texts[key] || key;
    } else {
      return key;
    }
  };

  clone_template_gateway = '/service/gateway/clone_template_by_key';

  content_gateway = '/service/gateway/sync';

  admin_data_gateway = '/admin/data';

  auto_iframe = function() {
    return $('.full-window iframe').css({
      height: $(window).height() - 3,
      width: $(window).width() - 100
    });
  };

  right_size_for_templates = function() {
    $('.templates-container').css({
      height: $(window).height() - 70
    });
    return $('.templates-container iframe').css({
      height: ($(window).height() - 70) * 0.95
    });
  };

  main_menus = [
    {
      title: get_text('Setup'),
      icon: "fa fa-cog",
      template: "setup-template"
    }, {
      title: get_text('Editor'),
      icon: "fa fa-edit",
      template: "editor-template",
      always_run: function() {
        auto_iframe();
        return window.onresize = auto_iframe;
      },
      body_overflow: true
    }, {
      title: get_text('Templates'),
      icon: "fa fa-windows",
      template: "templates-template",
      body_overflow: true,
      always_run: function() {
        right_size_for_templates();
        return window.onresize = right_size_for_templates;
      }
    }, {
      title: get_text('Statistics'),
      icon: "fa fa-bar-chart-o",
      template: "st-template",
      always_run: function() {
        auto_iframe();
        return window.onresize = auto_iframe;
      },
      body_overflow: true
    }, {
      title: get_text('Pay'),
      icon: "fa fa-heart",
      template: "pay-template",
      always_run: function() {
        auto_iframe();
        return window.onresize = auto_iframe;
      },
      body_overflow: true
    }, {
      title: get_text('Help'),
      icon: "fa fa-question",
      template: "doc-template",
      always_run: function() {
        auto_iframe();
        return window.onresize = auto_iframe;
      },
      body_overflow: true
    }
  ];

  ImageUploader = function(dom) {
    var self,
      _this = this;

    self = this;
    this.canvas = document.createElement('canvas');
    this.cx = this.canvas.getContext('2d');
    this.dom = $(dom);
    this.raw_dom = $(dom)[0];
    this.image_path = this.dom.attr('src').split('?')[0];
    this.drop_event = function(event) {
      var file, files, objURL, reader, url, _i, _len;

      _this.dom.removeClass('drag_over');
      files = event.dataTransfer.files;
      url = window.URL || window.webkitURL;
      objURL = url.createObjectURL || false;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (file.type.indexOf('image') === -1) {
          continue;
        }
        if (objURL) {
          _this.load_image(objURL(file));
        } else {
          reader = new FileReader();
          reader.readAsDataURL(file);
          reader.onload = function(ev) {
            return _this.load_image(ev.target.result);
          };
        }
      }
      return event.preventDefault();
    };
    this.drag_over_event = function(event) {
      _this.dom.addClass('drag_over');
      return event.preventDefault();
    };
    this.drag_leave_event = function(event) {
      _this.dom.removeClass('drag_over');
      return event.preventDefault();
    };
    this.add_drop_event = function() {
      _this.raw_dom.addEventListener('drop', _this.drop_event, false);
      _this.raw_dom.addEventListener('dragover', _this.drag_over_event, false);
      return _this.raw_dom.addEventListener('dragleave', _this.drag_leave_event, false);
    };
    this.remove_drop_event = function() {
      _this.raw_dom.removeEventListener('drop', _this.drop_event);
      _this.raw_dom.removeEventListener('dragover', _this.drag_over_event);
      return _this.raw_dom.removeEventListener('dragleave', _this.drag_leave_event);
    };
    this.load_image = function(file) {
      _this.raw_dom.src = file;
      _this.dom.one('load', function() {
        var h, height, height_r, image_type, max_r, request_data, thumb_height, thumb_width, w, width, width_r;

        width = this.naturalWidth || this.width;
        height = this.naturalHeight || this.height;
        thumb_height = 2560;
        thumb_width = 1280;
        width_r = width / thumb_width;
        height_r = height / thumb_height;
        max_r = Math.max(width_r, height_r);
        w = max_r > 1 ? width / max_r : width;
        h = max_r > 1 ? height / max_r : height;
        self.canvas.width = w;
        self.canvas.height = h;
        self.cx.drawImage(this, 0, 0, w, h);
        if (self.image_path.indexOf('.png') !== -1) {
          image_type = 'image/png';
        } else {
          image_type = 'image/jpeg';
        }
        request_data = {
          path: self.image_path,
          base64: self.canvas.toDataURL(image_type, 0.96)
        };
        Essage.show({
          message: get_text('Image Uploading, Wait...'),
          status: 'success'
        }, 30000);
        return $.post(content_gateway, request_data, function(resposne_data, status) {
          if (status === 'success') {
            return Essage.show({
              message: get_text('Image Uploaded, Done!'),
              status: 'success'
            }, 5000);
          }
        });
      });
      if (_this.raw_dom.complete) {
        return _this.dom.load();
      }
    };
    return this;
  };

  this.ConfigPages = function(data) {
    var cell, config_page, config_pages, group, raw_config_pages, site, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2,
      _this = this;

    raw_config_pages = data["interface"] != null ? data["interface"] : [];
    site = data.site;
    this.i18n = function(obj, key) {
      return obj[key + '_' + lang] || obj[key] || '';
    };
    this.get_config_value = function(key, default_value) {
      var value;

      if (site.configs && key in site.configs) {
        value = site.configs[key];
      } else {
        if (key in site) {
          value = site[key];
        }
      }
      if ($.type(value) === 'array') {
        value = value.join('\n');
      }
      if (default_value != null) {
        if (default_value === 'yes' || default_value === 'no') {
          if (value == null) {
            value = default_value;
          }
          if (value === true) {
            return 'yes';
          }
          if (value === false) {
            return 'no';
          }
        }
      }
      return value;
    };
    this.re_config_parts = function(raw_parts) {
      var folder, part, parts, row, src_url, styles_in_admin, _i, _j, _len, _len1, _ref, _ref1;

      parts = [];
      for (_i = 0, _len = raw_parts.length; _i < _len; _i++) {
        row = raw_parts[_i];
        part = {};
        part.key = row.key;
        part.id = 'fb_' + row.key;
        part.title = _this.i18n(row, 'title');
        part.default_value = row.default_value || '';
        part.value = _this.get_config_value(part.key, part.default_value);
        if (!row.model) {
          row.model = 'text';
        }
        part.model = row.model;
        if (part.model === 'image') {
          part.raw_value = row.value;
          if (row.width && row.height) {
            src_url = row.value + '?width=' + row.width + '&height=' + row.height;
            styles_in_admin = 'max-width:' + row.width + 'px; max-height:' + row.height + 'px';
          } else if (row.width) {
            src_url = row.value + '?width=' + row.width;
            styles_in_admin = 'max-width:' + row.width + 'px';
          } else if (row.height) {
            src_url = row.value + '?height=' + row.height;
            styles_in_admin = 'max-height:' + row.height + 'px';
          } else {
            src_url = row.value;
            styles_in_admin = '';
          }
          part.value = src_url;
          part.styles = row.styles_in_admin || styles_in_admin;
        }
        if (part.model === 'select') {
          part.options = _this.i18n(row, 'options');
          if (part.options === 'root') {
            part.options = [
              {
                title: '/',
                value: '/'
              }
            ];
            _ref = data.folders;
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              folder = _ref[_j];
              part.options.push({
                title: folder.path,
                value: folder.path
              });
            }
          }
        }
        if (part.model === 'check') {
          part.checked = (_ref1 = _this.get_config_value(part.key, part.default_value)) === 'on' || _ref1 === 'yes' || _ref1 === true;
        }
        if (part.model === 'textarea') {
          part.is_list = row.is_list || false;
        }
        parts.push(part);
      }
      return parts;
    };
    config_pages = [];
    for (_i = 0, _len = raw_config_pages.length; _i < _len; _i++) {
      config_page = raw_config_pages[_i];
      config_page.title = this.i18n(config_page, 'title');
      _ref = config_page.groups || [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        group = _ref[_j];
        group.title = this.i18n(group, 'title');
        if ((_ref1 = group.hidden) === 'on' || _ref1 === 'yes' || _ref1 === true) {
          group.visible = false;
        } else {
          group.visible = true;
        }
        _ref2 = group.cells || [];
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          cell = _ref2[_k];
          cell.parts = this.re_config_parts(cell.parts);
        }
      }
      config_pages.push(config_page);
    }
    return config_pages;
  };

  this.configs_to_text = function() {
    var content_dom, dom, dom_tag_name, dom_type, doms, id, line, lines, raw_text_value, text, _i, _j, _k, _len, _len1, _len2;

    doms = $('.fb_config');
    if (!doms.length) {
      return '';
    }
    text = '---\n';
    for (_i = 0, _len = doms.length; _i < _len; _i++) {
      dom = doms[_i];
      dom_tag_name = dom.tagName.toLowerCase();
      id = dom.id.replace('fb_', '');
      dom = $(dom);
      if (dom_tag_name === 'textarea' && id !== 'raw_content') {
        raw_text_value = $.trim(dom.val());
        if (!raw_text_value) {
          text += id + ': \n';
          continue;
        }
        lines = raw_text_value.split('\n');
        if (dom.hasClass('is_list')) {
          text += id + ':\n';
          for (_j = 0, _len1 = lines.length; _j < _len1; _j++) {
            line = lines[_j];
            text += '- ' + line + '\n';
          }
        } else {
          text += id + ': |\n';
          for (_k = 0, _len2 = lines.length; _k < _len2; _k++) {
            line = lines[_k];
            text += '  ' + line + '\n';
          }
        }
      } else {
        dom_type = dom.attr('type');
        if ((dom_type === 'text' || dom_type === 'hidden') || dom_tag_name === 'select') {
          text += id + ': ' + dom.val() + '\n';
        }
        if (dom_type === 'checkbox') {
          text += id + ': ' + (dom.attr('checked') ? 'yes' : 'no') + '\n';
        }
      }
    }
    text += '---\n';
    content_dom = $('#fb_raw_content');
    if (content_dom.length) {
      text += content_dom.val();
    }
    return text;
  };

  DashBoard = function(data) {
    var site, _i, _len, _ref,
      _this = this;

    this.data = data;
    this.image_uploaders = [];
    _ref = this.data.sites;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      site = _ref[_i];
      if (!site.domain) {
        site.domain = site.tmp_domain;
      }
    }
    this.menus = main_menus;
    this.current_menu = ko.observable(0);
    this.click_menu = function(index) {
      var menu;

      menu = _this.menus[index];
      _this.current_menu(index);
      if (menu.func && !menu.ever_clicked) {
        menu.func();
        menu.ever_clicked = true;
      }
      if (menu.always_run) {
        menu.always_run();
      }
      return $(document.body).css({
        'overflow': menu.body_overflow ? 'hidden' : 'auto'
      });
    };
    this.config_pages = ko.observableArray(new ConfigPages(data));
    this.current_config_page = ko.observable(0);
    this.sites = ko.observableArray(this.data.sites);
    this.site = this.data.site;
    this.site.domain = this.site.domain || this.site.tmp_domain;
    this.url_query_part = ko.observable(location.search);
    this.current_site_domain = ko.observable(this.site.domain);
    this.current_site_domain.subscribe(function(domain) {
      if (domain) {
        return window.location.href = 'http://' + domain + '/admin' + '?account_id=' + cross_account_id;
      } else {
        return alert('domain of this site is not valid');
      }
    });
    this.save_configs = function() {
      var config_path, submit_dom;

      submit_dom = $('button');
      submit_dom.removeClass('pure-button-primary');
      submit_dom.text('Working...');
      config_path = _this.site.config_path || 'site.txt';
      return $.post(content_gateway, {
        path: config_path,
        raw_content: configs_to_text()
      }, function() {
        submit_dom.addClass('pure-button-primary');
        submit_dom.text(get_text('Save Configs'));
        return Essage.show({
          message: get_text('Configs are saved!'),
          status: 'success'
        }, 3000);
      });
    };
    this.template_chooser = new TemplateChooser(this);
    this.config_for_images = function() {
      var dom, uploader, _j, _len1, _ref1, _results;

      _ref1 = $('.drag_and_upload');
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        dom = _ref1[_j];
        uploader = new ImageUploader(dom);
        uploader.add_drop_event();
        _results.push(_this.image_uploaders.push(uploader));
      }
      return _results;
    };
    this.reset_for_images = function() {
      var uploader, _j, _len1, _ref1;

      _ref1 = _this.image_uploaders;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        uploader = _ref1[_j];
        uploader.remove_drop_event();
      }
      return _this.image_uploaders = [];
    };
    this.reset = function() {
      return $.getJSON(admin_data_gateway, {}, function(data) {
        _this.config_pages(new ConfigPages(data));
        _this.reset_for_images();
        return _this.config_for_images();
      });
    };
    if (this.site.error_info) {
      Essage.show({
        message: this.site.error_info,
        status: 'error'
      }, 5000);
    }
    return this;
  };

  TemplateChooser = function(dash) {
    var template_package, _i, _len, _ref,
      _this = this;

    this.template_packages = [];
    this.template_packages.push({
      title: get_text('Default Template'),
      template_key: 'default'
    });
    _ref = dash.data.template_packages;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      template_package = _ref[_i];
      this.template_packages.push(template_package);
    }
    this.site = dash.site;
    this.current_used = ko.observable(this.site.template_key || 'default');
    this.current_template_key = ko.observable('');
    this.this_used_now = ko.computed(function() {
      if (_this.current_used() === _this.current_template_key() && _this.current_used()) {
        return true;
      } else {
        return false;
      }
    });
    this.show_chooser_button = ko.computed(function() {
      if (_this.this_used_now()) {
        return false;
      } else {
        if (!_this.current_template_key()) {
          return false;
        } else {
          return true;
        }
      }
    });
    this.use_this_template = function() {
      var request_data;

      if (_this.current_template_key()) {
        request_data = {
          auto_update: true,
          template_key: _this.current_template_key(),
          site_id: _this.site['_id']
        };
        $.post(clone_template_gateway, request_data, function() {
          return dash.reset();
        });
        return _this.current_used(_this.current_template_key());
      }
    };
    this.current_iframe_url = ko.computed(function() {
      if (_this.current_template_key()) {
        return '/?template_key=' + _this.current_template_key() + '&random=' + Math.floor(Math.random() * 100000);
      } else {
        return '/?random=' + Math.floor(Math.random() * 100000);
      }
    });
    return this;
  };

  exports.DashBoard = DashBoard;

  $(document).ready(function() {
    $.getJSON(admin_data_gateway, {}, function(data) {
      var dashboard;

      dashboard = new DashBoard(data);
      exports.dashboard = dashboard;
      ko.applyBindings(dashboard);
      return dashboard.config_for_images();
    });
    return window.onresize = auto_iframe;
  });

}).call(this);
